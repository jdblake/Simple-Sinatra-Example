= Simple-Sinatra

A very simple sinatra[http://www.sinatrarb.com/] application to demonstrate some basic features.

There isn't a lot here yet, but I will be adding more.

<em>Note that I have tried to comment as much as possible in the code...</em>

The project has empty log and db folders. When you first run the app, a db and the two logs are created
in the appropriate directories.

== Application Purpose

This application creates a database of name/grade pairs. The names are <b><tt>strings</tt></b> and the
grades must be <b><tt>integers</tt></b>. The db records are mapped to a <b><tt>Student</tt></b> class
using DataMapper[http://datamapper.org].

You can interact with the application with any browser using a simple URL API:

    /get/<name>

    /set/<name>/<grade>

    /dumpString

and the root of this web application displays a list of all entries in the db that is refreshed ever second
using JQuery...

== Gems Needed

To run this simple example, you need to update to the latest {rubygems}[http://rubygems.org/]. To install
rubygems--or to update to the latest version--follow the instructions on the rubygems
{download page}[http://rubygems.org/pages/download]

    sinatra
    dm-core
    dm-migrations
    dm-validations
    haml
    sinatra/logger

== Things Included So Far:

* Basic sinatra functionality
* DataMapper[http://datamapper.org] for ORM
  * The model is <em>very</em> simple!
  * There is one validation (to ensure that data is an integer)
  * The DataMapper logger is enabled
    * The DataMapper log goes to log/dm.log
    * The log level is set to <b>debug</b>
* Haml[http://haml-lang.com/] for markup
* Simple Ajax polling refresh listing elements in the db
  * Uses JQuery
  * Javascript located in the layout file
* Added a sinatra logger
  * Programmers can explicity log messages
  * Messages can be logged at several levels
  * Messages appear in the log only if the log is active for that level
  * Log files loated in the log directory
  * Logs are named for the environment
    * test
    * development
    * production

== Things To Do/Add:

* Sass[http://sass-lang.com/]
* Authentication
* Move the data models to a separate directory
* Move the Javascript to index.haml (it is the <em>only</em> place that uses it!)
* Testing
* Add delete to api functions
* Add config.ru to facilitate deployment of app
* Others?

== Usage:

<em>This assumes that you have ruby and sinatra installed!</em>

1. Install git locally if you haven't. You can find installation instructions {here}[http://help.github.com/].

2. Clone this repository on your local machine:

    git clone git://github.com/jdblake/Simple-Sinatra-Example.git

3. cd to your local copy

    cd Simple-Sinatra-Example

4. Start the server

    ruby simple.rb

(The server starts on port 4567)

5. Navigate to the index to see a list of the records in the database refreshed every second

    http://localhost:4567/

6. Use the API to add records to the db, e.g.

    http://localhost:4567/set/jon/33

== Other Ideas

You can access the database through the ruby interactive shell (<b>irb</b>) and change the db that way.

This gives you a <em>lot</em> of control over the db. You load a file into <tt>irb</tt> using the
<t>>-r</tt> switch:

    irb -r simple.rb

This loads all your models, etc. and connects to the db. You can then add/remove records using DataMapper
calls:

    Student.create(:name => "Jon", :grade => 3)

and

	Student.first(:name => "Jon").destroy

Look at the {DataMapper documentation}[http://datamapper.org/docs/] for help on interacting with a
DataMapper db.

One way to test that the simple example validation (that the grade is an integer) works is to try the
following when you are in irb:

    s = Student.new(:name => "Jon", :grade => "test")
    s.save

You will get <tt>false</tt> because the validation failed.

Two things to note:

1. If you tried this:

     Student.create(:name => "Jon", :grade => "test")

the record would not be saved in the db because of the validation error, but you would not get immediate
feedback about it lie you do when you go the <tt>new/save</tt> route.

2. If you had tried this:

     Student.create(:name => "Jon", :grade => "4")

the record <b>would</b> be saved because the string <tt>"3"</tt> can be implicitly converted to an integer
value
